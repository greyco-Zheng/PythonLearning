
Python开发工具——Visual Studio Code, Pycharm

使用turtle在屏幕上绘制图形
turtle.pensize(4) 
turtle.pencolor('red')  #画笔颜色
turtle.forward(100)    #向前走100步
turtle.right(90)    #向右转90度
turtle.mainloop()

使用VS Code配anaconda解释器，需要将anaconda添加系统环境变量，否则无法识别

关于if __name__ == '__main__':
python解释器在读取源文件时，设置了一些特殊变量例如__name__，然后执行该文件内所有代码。
1. 如果这个模块为主程序，即调用时使用 python foo.py。解释器会将硬编码的"__main__"分配给变量__name__。
   即做了一个操作：__name__ = "__main__"
2. 如果这个模块是被其他程序调用或导入，而非作为主程序运行，即调用时使用 import foo。解释器会首先检索foo.py文件，
   并首先执行该模块。在这个过程中，将导入该模块时使用的语句中的名称"foo"分配给变量__name__。
   即做了一个操作：__name__ = "foo"
3. 当特殊变量设置完成后，解释器会执行文件中所有的代码。也就是说在一个标准的模块内容中，前半部分为众多函数的定义，
   后半部分为if __name__ == "__main__": 条件下的语句，只有当该模块作为主程序被运行时，变量__name__才被赋值为"__main__",
   if后面的语句才会被执行；当该模块被其他模块/程序导入或调用时，变量"__name__"被赋值为模块名（本例中为"foo"），而不是"__main__"，
   并且跳过if后面的语句，不予执行。
详见https://stackoverflow.com/questions/419163/what-does-if-name-main-do 
   
#关于变量
1. int支持二进制、八进制、十进制、十六进制，使用int()内置函数对变量类型进行转换时，可以指定进制。
2. float()将一个字符串转换成浮点数。
3. str()将指定的对象转换成字符串形式，可以指定编码。
4. chr()将整数转换成该编码对应的字符串 （一个字符）。
5. ord()将字符串（一个字符）转换成对应的编码（一个整数）

#占位符语法——%
%d——整数占位符
%f——小数占位符
%%——百分号占位符

#f字符串
f-string以f开头，用大括号 {} 表示被替换字段，其中直接填入替换内容。
f-string的大括号 {} 可以填入表达式或调用函数
>>> number = 7
>>> f'My lucky number is {number}'
'My lucky number is 7'

>>> name = 'ERIC'
>>> f'My name is {name.lower()}'
'My name is eric'

>>> import math
>>> f'The answer is {math.log(math.pi)}'
'The answer is 1.1447298858494002'

#if-elif-else分支结构
可以用elif的时候就尽量避免使用嵌套结构，使代码“扁平化”，增强代码的可读性

#循环结构
1. for-in循环——知道循环次数或对容器进行迭代 
2. while循环——不知道具体循环次数
3. break关键字可以终止循环，但只能终止其所在的循环
4. continue关键字可以用来放弃 本次循环后续的代码直接让循环进入下一轮

#函数和模块的使用
1. 函数的参数可以有默认值，并且传递 参数时可以不按照设定的顺序进行传递，只要标明参数名
2. 可变参数
    在不确定参数个数时，可以使用可变参数。
例：# 在参数名前面的*表示args是一个可变参数
def add(*args):
    total = 0
    for val in args:
        total += val
    return total
    
print(add(1, 2))
print(add(1, 2, 3))
print(add(1, 3, 5, 7, 9))

3. 使用模块管理函数
    python中没有函数重载的概念，所以若存在同名函数，那么后面的定义会 覆盖之前的定义。
    解决方案：python中每个文件代表了一个模块（module），在不同的模块中可以有同名的函数，
             在使用函数的时候通过import关键字导入指定模块，可以区分使用哪个模块的该函数。
             module1.fun()
             module2.fun()
4. 模块中除了函数外，还包含其他可执行代码，但不希望在模块被导入时被执行，
   仅仅在被作为主程序直接运行时才可以被执行时，可以利用if __name__ == '__main__':
   例如：
def foo():
    pass


def bar():
    pass


# __name__是Python中一个隐含的变量它代表了模块的名字
# 只有被Python解释器直接执行的模块的名字才是__main__
if __name__ == '__main__':
    print('call foo()')
    foo()
    print('call bar()')
    bar()   

import module3

# 导入module3时 不会执行模块中if条件成立时的代码 因为模块的名字是module3而不是__main__

5. 变量的作用域
    python在查找一个变量时会按照“局部作用域”，“嵌套作用域”，“全局作用域”和“内置作用域”的顺序进行搜索。
    “内置作用域”即Python内置的标识符，例如input, print, int。
    （1）调用函数修改全局变量a的值
    使用global关键字来指示函数中的某变量来自全局作用域。
    （2）调用函数内部的函数修改嵌套作用域的变量
    使用nonlocal关键字指示变量来自于嵌套作用域。

#字符串和常用数据结构
1. print打印完一个字符（字符串）后，一般默认在字符串后面加换行符。
   print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
   故多次print内容之间会以换行的形式显示。
   如果要取消字符串结尾换行，可以使用end关键字指定添加其他符号.
   当end = ''时即添加空字符，end = '**'时即在字符串后添加**
2. 转义字符的使用
（1）\n, \t, \', \\
（2）\后面还可以跟 八进制 或 十六进制 数来表示字符
（3）\后面跟Unicode字符编码来表示字符
（4）在字符串最前面加r，\将不表示转义
3. 字符串的拼接—— +运算符
4. 字符串内容的重复—— *运算符
5. 判断一个字符串是否包含另一个字符串—— in和not in
6. 用切片的方式从字符串中取出特定字符——[]和[:]

7. 列表——结构化的、非标量类型的值的有序序列。
# 通过循环用下标遍历列表元素
for index in range(len(list1)):
    print(list1[index])
# 通过for循环遍历列表元素
for elem in list1:
    print(elem)
# 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值
for index, elem in enumerate(list1):
    print(index, elem)








